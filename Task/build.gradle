plugins {
    id 'java'
    id 'jacoco'
    id 'jacoco-report-aggregation'
    id 'application'
    id 'java-test-fixtures'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.springframework.boot' version '3.2.0'
}

group = 'com.demo'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-json'
    implementation 'org.springframework.boot:spring-boot-starter-jetty'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Database - PostgreSQL Driver & Liquibase for Migrations
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.5'
    implementation group: 'org.liquibase', name: 'liquibase-core', version: '4.31.1'

    // MapStruct - Object Mapping
    implementation group: 'org.mapstruct', name: 'mapstruct', version: '1.6.3'
    annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.6.3'
    annotationProcessor group: 'org.projectlombok', name: 'lombok-mapstruct-binding', version: '0.2.0'

    // Testcontainers - Database Testing with PostgreSQL
    testImplementation group: 'org.testcontainers', name: 'testcontainers', version: '1.20.6'
    testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: '1.20.6'
    testImplementation group: 'org.testcontainers', name: 'postgresql', version: '1.20.6'

    // Swagger
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.6.0'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-api', version: '2.6.0'

    // Lombok
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.38'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.38'
    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.38'
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.38'

    // Logging
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.17'

    // My modules
    implementation project(':audit-starter')
    implementation project(':logging-starter')
}

application {
    mainClass = 'com.demo.finance.app.TaskMain'
    applicationDefaultJvmArgs = [
            '-Dorg.eclipse.jetty.server.webapp.ContainerIncludeJarPattern=.*',
            '-Dorg.eclipse.jetty.servlet.Default.useFileMappedBuffer=false',
    ]
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
    integrationTest {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
    filter {
        excludeTestsMatching "com.demo.finance.app.TaskMainTest"
        excludeTestsMatching "com.demo.finance.app.config.LiquibaseManagerTest"
        excludeTestsMatching "com.demo.finance.app.config.DataSourceManagerTest"
        excludeTestsMatching "com.demo.finance.out.repository.impl.BudgetRepositoryImplTest"
        excludeTestsMatching "com.demo.finance.out.repository.impl.TransactionRepositoryImplTest"
        excludeTestsMatching "com.demo.finance.out.repository.impl.UserRepositoryImplTest"
        excludeTestsMatching "com.demo.finance.out.repository.impl.GoalRepositoryImplTest"
    }
    maxParallelForks = Runtime.runtime.availableProcessors()
    finalizedBy jacocoTestReport
}

tasks.register('integrationTest', Test) {
    useJUnitPlatform()
    filter {
        includeTestsMatching "com.demo.finance.app.TaskMainTest"
        includeTestsMatching "com.demo.finance.app.config.LiquibaseManagerTest"
        includeTestsMatching "com.demo.finance.app.config.DataSourceManagerTest"
        includeTestsMatching "com.demo.finance.out.repository.impl.BudgetRepositoryImplTest"
        includeTestsMatching "com.demo.finance.out.repository.impl.TransactionRepositoryImplTest"
        includeTestsMatching "com.demo.finance.out.repository.impl.UserRepositoryImplTest"
        includeTestsMatching "com.demo.finance.out.repository.impl.GoalRepositoryImplTest"
    }
    maxParallelForks = 1
    forkEvery = 1
    systemProperty "junit.jupiter.execution.parallel.enabled", "false"
    finalizedBy jacocoTestReport
    jacoco {
        enabled = true
    }
}

tasks.named('jacocoTestReport', JacocoReport) {
    dependsOn tasks.named('test'), tasks.named('integrationTest')
    executionData.setFrom(fileTree(layout.buildDirectory.dir("jacoco")).include(
            "test.exec",
            "integrationTest.exec"
    ))
    sourceDirectories.setFrom(files(sourceSets.main.allSource.srcDirs))
    classDirectories.setFrom(files(sourceSets.main.output))
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

tasks.named('jar') {
    manifest {
        attributes(
                'Main-Class': 'com.demo.finance.app.TaskMain',
                'Class-Path': configurations.runtimeClasspath.collect { it.name }.join(' ')
        )
    }
    into('lib') {
        from configurations.runtimeClasspath
    }
}

jacoco {
    toolVersion = "0.8.12"
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}